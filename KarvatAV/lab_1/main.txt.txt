#include <iostream>

using T = int;

struct Node {
    T value;
    Node* next;
};

class List
{
private:
    Node* head = nullptr;
    int current_size;
public:
    List() {
        current_size = 0;
        head = nullptr;
    }
    ~List() {
        resize(0);
    }
    List(unsigned size) {
        current_size = size;
        head = new Node{ 0 };
        Node* current = head;

            for (int i = 0; i < current_size; i++) {
                current->next = new Node{ 0 };
                current = current->next;
            }
    }
    List(unsigned size, const T& val) {
        current_size = size;
        head = new Node{ val };


            Node * current = head;
        for (int i = 0; i < current_size; i++) {
            current->next = new Node{ val };
            current = current->next;
        }
    }
    void push_back(const T& val);
    void resize(unsigned size);
    unsigned size();
    void print();
    bool insert(unsigned pos, const T& val);
    bool contains(const T& val);
    int find(const T& val);
    T& operator [](unsigned index);
    List& operator=(const List& clist);
    List(const List& clist);
};

List::List(const List& list) {
    Node* current = list.head;
    for (int i = 0; i < list.current_size; i++) {
        push_back(current->value);
        current = current->next;
    }
}
void List::resize(unsigned size)
{
    if (current_size == 0 && size != 0)
        head = new Node();
    Node* current = head;
    if (size > current_size) {
        for (int i = 0; i < size - 1; i++) {
            if (current_size == 0 || (i >= current_size - 1))
            {
                current->next = new Node{ 0 };
            }
            current = current->next;
        }
    }
    else {
        for (int i = 0; i < current_size - size; i++) {
            current = head->next;
            delete head;
            head = current;
        }
    }
    current_size = size;
}

void List::push_back(const T& val)
{
    if (head == nullptr) {
        head = new Node{ val };
    }
    else {
        Node* current = this->head;
        while (current->next != nullptr)
            current = current->next;
        current->next = new Node{ val };
    }
    current_size++;
}

unsigned List::size() {
    return current_size;
}

bool List::insert(unsigned pos, const T& val) {
    if (pos > current_size || pos < 0)
        return false;
    if (pos == 0) {
        head = new Node{ val, head };
        current_size++;
        return true;
    }
    if (pos == current_size) {
        push_back(val);
        return true;
    }
    else {
        Node* last = this->head;
        for (int i = 0; i < pos - 1; i++)
        {
            last = last->next;
        }
        Node* newElement = new Node{ val, last->next };
        last->next = newElement;
        current_size++;
        return true;
    }
}

bool List::contains(const T& val) {
    Node* current = head;
    for (int i = 0; i < current_size; i++) {
        if (current->value == val)
            return true;
        current = current->next;
    }
    return false;
}

int List::find(const T& val)
{
    Node* current = head;
    for (int i = 0; i < current_size; i++) {
        if (current->value == val) {
            return i;
        }
        current = current->next;
    }
    return -1;
}

T& List::operator [](unsigned index) {
    if (index < 0 || index >= current_size) {

            std::cout << "wrong type";
        system("Pause");
    }
    Node* current = head;
    for (int i = 0; i < index; i++) {
        current = current->next;
    }
    return current->value;
}

List& List::operator=(const List& clist) {

        Node * current = clist.head;
    while (current != nullptr) {
        push_back(current->value);
        current = current->next;
    }
    return *this;
}

void List::print() {
    Node* current = head;
    for (int i = 0; i < current_size; i++) {
        std::cout << current->value << " ";
        current = current->next;
    }
    std::cout << '\n';
}

int main() {
    // example 1
    List list1{ 44 };
    list1.print();
    list1.push_back(12);
    list1.print();
    std::cout << "Size of list1: " << list1.size() << std::endl;

    // example 2
    List list2{ 2,56 };
    list2.print();
    list2.resize(12);
    list2.print();
    std::cout << "Size of list2: " << list2.size() << std::endl;
    list2.insert(12, 151);
    list2.print();
    std::cout << "New size of list2: " << list2.size() << std::endl;
    std::cout << list2.operator[](11) << std::endl;
    std::cout << list2.operator[](12) << std::endl;

    // example 3
    List list3;
    list3.push_back(24);
    list3.push_back(100);
    list3.push_back(1);
    list3.print();
    std::cout << "finding 4.. result " << list3.find(4) << std::endl;
    std::cout << "finding 7.. result " << list3.find(7) << std::endl;
    std::cout << "Size of list3: " << list3.size() << std::endl;
    std::cout << list3.contains(4) << std::endl;
    std::cout << list3.contains(7) << std::endl;

    List list4;
    list4 = list3;
    std::cout << "list 4 is (copied list3): ";
    list4.print();

    return 0;
}